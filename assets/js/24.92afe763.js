(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{363:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("通过前面的学习，我们知道 Pod 是 kubernetes 最小的调度单位。如果将 Pod 落实到 API 对象上，那么 container 则是 Pod 上的一个字段。这里我们需要搞清楚哪些属性是属于容器哪些是属于 Pod。")]),t._v(" "),a("p",[t._v("凡是调度、网络、存储以及安全相关的属性基本都是 Pod 级别的。")]),t._v(" "),a("p",[t._v("接下来我们来学习 Pod 中几个重要的字段。")]),t._v(" "),a("p",[a("strong",[t._v("NodeSelector")]),t._v("：是一个将 Pod 和 Node 绑定的字段。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nodeSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("disktype")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ssd\n")])])]),a("p",[t._v("这样一个配置，意味着 Pod 只能被带有 disktype:ssd 标签的节点调度，否则就会失败。")]),t._v(" "),a("p",[a("strong",[t._v("NodeName")]),t._v("：一旦 Pod 上这个字段被赋值意味着 Pod 已经被某个节点成功调度了。该字段只会被调度器设置。但是我们也可以手动设置来骗过调度器。")]),t._v(" "),a("p",[a("strong",[t._v("HostAliases")]),t._v("：定义 Pod 中的 hosts 文件，即设置 /etc/hosts。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hostAliases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10.1.2.3"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hostnames")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo.remote"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar.remote"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("如下是设置完成后的 /etc/hosts。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("cat /etc/hosts\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Kubernetes-managed hosts file.")]),t._v("\n127.0.0.1 localhost\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n10.244.135.10 hostaliases"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pod\n10.1.2.3 foo.remote\n10.1.2.3 bar.remote\n")])])]),a("p",[t._v("这里需要注意的是，为 Pod 中的容器设置 hosts 只能通过这种方式，如果是在容器运行时直接修改 /etc/hosts 会在 Pod 被删除和创建时被重新设置。")]),t._v(" "),a("p",[t._v("除了上述 hosts 配置外，凡是跟容器的 Linux Namespace 相关的属性就一定是 Pod 级别的。")]),t._v(" "),a("p",[t._v("这里可以跟虚拟机与虚拟机上的应用做个比较，这里 Pod 就是虚拟机，容器就是虚拟机上的应用。因此不难想象，在虚拟机上的配置都应该是 Pod 级别的。")]),t._v(" "),a("p",[t._v("比如 "),a("strong",[t._v("shareProcessNamespace=true")]),t._v("：在容器间共享 pid。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("shareProcessNamespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" shell\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" busybox\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),a("p",[t._v("这个 Pod 中我们声明了两个容器，nginx 和 一个开启了 tty 和 stdin 的 shell 容器。")]),t._v(" "),a("p",[t._v("这里 shell 容器的效果等同于 docker run -it （it 分别是 stdin 和 tty 的意思）。")]),t._v(" "),a("p",[t._v("这里我们实践一下：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("kubectl create -f nginx.yaml\n")])])]),a("p",[t._v("当 Pod 被创建完成之后我们就可以通过 kubectl attach 命令，链接 shell 容器的 tty 了。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("kubectl attach -it nginx -c shell\n")])])]),a("p",[t._v("我们可以在 shell 执行 ps 来尝试共享 pid namespace 的效果。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ kubectl attach -it nginx -c shell\n/ "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ps ax")]),t._v("\nPID   "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v("     TIME  COMMAND\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 /pause\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 nginx: master process nginx -g daemon off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 nginx: worker process\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" ax\n")])])]),a("p",[t._v("这里我们可以看到 infra 容器的 /pause 进程，以及 ngnix 进程和 sh 进程。")]),t._v(" "),a("p",[t._v("同样的我们可以在 Pod 中共享宿主机的 Namespace。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hostNetwork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hostIPC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hostPID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" shell\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" busybox\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),a("p",[t._v("这样我们就可以使用宿主机的进程，与宿主机进行 IPC 通信以及看到宿主机中的所有进程了。")]),t._v(" "),a("p",[t._v("除这些字段外，Pod 中最重要的字段就是 "),a("strong",[t._v("container")]),t._v(" 了。除普通的 container 外，我们还接触 initContainer，它们的区别在于 initContainer 会先于普通的 container 并按照声明顺序执行。container 只要等到 initContainer 执行完成才会执行。")]),t._v(" "),a("p",[t._v("kubernetes 中对 container 的定义与 docker 大致一样。如 image、command、workDir、ports 和 volumeMounts 等。如这些主要字段外还有一些需要注意的字段。")]),t._v(" "),a("p",[a("strong",[t._v("imagePullPolicy")]),t._v(": 定义镜像的拉取策略。")]),t._v(" "),a("ul",[a("li",[t._v("Always：每次创建 Pod 都重新拉取一次镜像，当拉取镜像的 tag 为 nginx 或 nginx:latest 也会起到相同的效果。")]),t._v(" "),a("li",[t._v("Never/IfNotPresent：不主动拉取镜像，只有在宿主机中不存在才会主动拉取。")])]),t._v(" "),a("p",[a("strong",[t._v("lifecycle")]),t._v("：它定义的是容器的生命周期 Hooks。")]),t._v(" "),a("p",[t._v("lifecycle的作用是在容器的状态发生变化时触发一系列 “钩子”。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lifecycle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("demo\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lifecycle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("container\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("lifecycle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("postStart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/sh"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo Hello from the postStart handler > /usr/share/message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("preStop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/sbin/nginx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-s"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"quit"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("这里我们为 lifecycle-demo-container 容器定义了生命周期钩子 postStart 和 preStop。")]),t._v(" "),a("ul",[a("li",[t._v("postStart：容器指定后立即执行一个操作，需要注意的是，这里并不能保证在 ENTRYPOINT 之后执行。")]),t._v(" "),a("li",[t._v("preStop：容器在被杀死前(收到 SIGKILL 信号)执行。这里是同步的，只有钩子执行完成才会杀死容器。\n这里的例子是在容器启动后在 /usr/share/message 中写入一条 hello message。在容器关闭之前调用 nginx 的退出命令。")])]),t._v(" "),a("p",[t._v("这里我们可以大致的了解下 Pod 在 kubernetes 中的生命周期。")]),t._v(" "),a("p",[t._v("Pod 的生命周期主要体现在 API 的 "),a("strong",[t._v("Status")]),t._v(" 字段。它是除了 Metadata 和 Spec 之外第三个比较重要的字段。其中 pod.status.phase 就是 Pod 当前的状态。状态列表如下：")]),t._v(" "),a("ul",[a("li",[t._v("Pending：表示 Pod 的 yaml 文件已经提交给 kubernetes 并保存在 Etcd 中，但出于其他原因未能被成功创建。")]),t._v(" "),a("li",[t._v("Running：表示 Pod 已经成功被某一节点调度，且至少有一个容器在运行中了。")]),t._v(" "),a("li",[t._v("Succeeded：表示 Pod 的所有容器都正常运行并成功退出了，这种情况在一次性任务中很常见。")]),t._v(" "),a("li",[t._v("Failed：表示 Pod 中至少有一个容器不正常退出(非 0 返回码)退出。这个时候就要想办法 Debug 容器了，通过 Events 等。")]),t._v(" "),a("li",[t._v("Unknown：表示异常状态，意味着 Pod 状态未能被 kubelet 持续汇报给 kube-apiserver。可能是主从节点的通信出现问题了。")])]),t._v(" "),a("p",[t._v("更进一步的，每一个 Status 还可以细分出一组 "),a("strong",[t._v("Conditions")]),t._v(" 。这些细分状态包含 PodScheduled、")]),t._v(" "),a("p",[t._v("Ready、Initialized 和 Unschedulable。他们主要用于描述造成当前 Status 的原因。")]),t._v(" "),a("p",[t._v("比如 Status 为 Pending，对应的 Condition 为 Unschedulable，则表示调度出了问题。")]),t._v(" "),a("p",[t._v("又如 Ready Condition，表示 Pod 不仅正常启动(Running)且已经对外服务了。")]),t._v(" "),a("p",[t._v("如果想知道 Pod Yaml 文件的全部字段，可以参考 $GOPATH/src/k8s.io/kubernetes/vendor/k8s.io/api/core/v1/types.go 下的 struct。")]),t._v(" "),a("comment"),t._v(" "),a("comment")],1)}),[],!1,null,null,null);s.default=e.exports}}]);